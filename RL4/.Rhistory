# Установка и загрузка необходимых пакетов
if (!require("rvest")) install.packages("rvest", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
if (!require("readr")) install.packages("readr", dependencies = TRUE)
library(rvest)
library(dplyr)
library(readr)
# URL страницы
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
# Чтение HTML-страницы
page <- read_html(url)
# Получение таблицы
table_node <- html_node(page, "table.wikitable")
# Извлечение строк таблицы
rows <- html_nodes(table_node, "tr")[-1]  # без заголовка
# Обработка строк
museum_data <- lapply(rows, function(row) {
columns <- html_nodes(row, "td")
# Название и ссылка
name_node <- html_node(columns[1], "a")
name <- html_text(name_node, trim = TRUE)
link <- html_attr(name_node, "href")
full_link <- if (!is.na(link)) paste0("https://ru.wikipedia.org", link) else NA
# Местоположение
location <- html_text(columns[2], trim = TRUE)
data.frame(
Название = name,
Местоположение = location,
Ссылка = full_link,
stringsAsFactors = FALSE
)
})
# Объединение в один датафрейм
museum_df <- bind_rows(museum_data)
# Сохранение в CSV с русской кодировкой для Windows (Windows-1251)
write_csv2(museum_df, "музеи_ростовской_области.csv", locale = locale(encoding = "Windows-1251"))
setwd("C:/Users/pasha/Desktop/6sem/BigData/BigData/RL4")
# Объединение в один датафрейм
museum_df <- bind_rows(museum_data)
museum_df
museum_data
# Загружаем нужные библиотеки
library(rvest)
library(dplyr)
library(readr)
# Указываем URL страницы Википедии
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
# Читаем HTML-код страницы
page <- read_html(url)
# Извлекаем первую таблицу на странице
table_node <- html_element(page, "table.wikitable")
# Получаем строки таблицы
rows <- html_elements(table_node, "tr")
# Обрабатываем строки таблицы
museum_data <- lapply(rows[-1], function(row) {
columns <- html_elements(row, "td")
if (length(columns) >= 2) {
name_node <- html_element(columns[1], "a")
name <- html_text(name_node, trim = TRUE)
link <- html_attr(name_node, "href")
location <- html_text(columns[2], trim = TRUE)
# Формируем абсолютную ссылку
full_link <- if (!is.na(link)) paste0("https://ru.wikipedia.org", link) else NA
return(data.frame(
Название = name,
Местоположение = location,
Ссылка = full_link,
stringsAsFactors = FALSE
))
} else {
return(NULL)
}
})
# Объединяем все в один датафрейм
museum_df <- bind_rows(museum_data)
# Сохраняем в CSV с кодировкой Windows-1251
write_csv(museum_df, "музеи_ростовской_области.csv", locale = locale(encoding = "Windows-1251"))
museum_data
# Сохраняем в CSV с кодировкой Windows-1251
write_csv(museum_df, "музеи_ростовской_области.csv", locale = locale(encoding = "Windows-1251"))
# Создаем матрицу средних изменений
mean_changes <- sapply(selected_countries, function(country) {
country_data <- filtered_data[filtered_data$Country == country, ]
sapply(metrics, function(m) {
diff(range(country_data[[m]], na.rm = TRUE))
})
})
# Установка и загрузка библиотек
if (!require("rvest")) install.packages("rvest", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
library(rvest)
library(dplyr)
# URL страницы
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
# Чтение HTML
page <- read_html(url)
# Извлечение таблицы
table_node <- html_node(page, "table.wikitable")
# Извлечение всех строк, кроме заголовка
rows <- html_nodes(table_node, "tr")[-1]
# Обработка строк
museum_data <- lapply(rows, function(row) {
columns <- html_nodes(row, "td")
if (length(columns) >= 2) {
name_node <- html_node(columns[1], "a")
name <- if (!is.na(name_node)) html_text(name_node, trim = TRUE) else html_text(columns[1], trim = TRUE)
link <- html_attr(name_node, "href")
full_link <- if (!is.na(link)) paste0("https://ru.wikipedia.org", link) else NA
location <- html_text(columns[2], trim = TRUE)
data.frame(
Название = name,
Местоположение = location,
Ссылка = full_link,
stringsAsFactors = FALSE
)
} else {
NULL
}
})
# Объединение всех строк в датафрейм
museum_df <- bind_rows(museum_data)
# Сохранение в CSV с Windows-кодировкой
write.csv(museum_df, file = "музеи_ростовской_области.csv", row.names = FALSE, fileEncoding = "Windows-1251")
# Установка и загрузка библиотек
if (!require("rvest")) install.packages("rvest", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
library(rvest)
library(dplyr)
# URL страницы
url <- "https://ru.wikipedia.org/wiki/Список_музеев_Ростовской_области"
# Загрузка страницы
page <- read_html(url)
# Поиск таблицы
table_node <- html_node(page, "table.wikitable")
# Получение строк таблицы, исключая заголовок
rows <- html_nodes(table_node, "tr")[-1]
# Обработка строк таблицы
museum_data <- lapply(rows, function(row) {
columns <- html_nodes(row, "td")
if (length(columns) >= 3) {
# Пропускаем первый столбец (номер)
name_node <- html_node(columns[2], "a")
name <- if (!is.na(name_node)) html_text(name_node, trim = TRUE) else html_text(columns[2], trim = TRUE)
link <- html_attr(name_node, "href")
full_link <- if (!is.na(link)) paste0("https://ru.wikipedia.org", link) else NA
location <- html_text(columns[3], trim = TRUE)
data.frame(
Название = name,
Местоположение = location,
Ссылка = full_link,
stringsAsFactors = FALSE
)
} else {
NULL
}
})
# Объединяем в датафрейм
museum_df <- bind_rows(museum_data)
# Сохраняем в CSV с кодировкой Windows-1251
write.csv(museum_df, file = "музеи_ростовской_области.csv", row.names = FALSE, fileEncoding = "Windows-1251")
library(rvest)
library(dplyr)
library(purrr)
library(stringr)
get_numbeo_data <- function(year) {
url <- paste0("https://www.numbeo.com/quality-of-life/rankings_by_country.jsp?title=", year)
tryCatch({
page <- read_html(url)
table_node <- page %>% html_node("table#t2")
if (is.na(table_node)) {
message(paste("Таблица не найдена на странице за", year))
return(NULL)
}
table_data <- table_node %>%
html_table(header = TRUE, fill = TRUE) %>%
as_tibble() %>%
mutate(across(-c(Rank, Country), as.numeric)) %>%
rename_all(~str_remove_all(., "\\s+")) %>%
mutate(Year = year)
return(table_data)
}, error = function(e) {
message(paste("Ошибка при обработке данных за", year, ":", e$message))
return(NULL)
})
}
test_data <- get_numbeo_data(2021)
if (!is.null(test_data)) {
print("Тестовый запрос успешен:")
print(head(test_data))
years <- 2014:2021
all_data <- map_dfr(years, ~{
Sys.sleep(3)
get_numbeo_data(.x)
})
if (!is.null(all_data) && nrow(all_data) > 0) {
all_data <- all_data %>% select(where(~!all(is.na(.x))))
write.csv(all_data, "numbeo_quality_of_life_2014_2021.csv", row.names = FALSE)
message("\nДанные успешно сохранены в файл 'numbeo_quality_of_life_2014_2021.csv'")
message("Всего записей: ", nrow(all_data))
message("Столбцы: ", paste(names(all_data), collapse = ", "))
str(all_data)
} else {
message("Не удалось собрать данные.")
}
} else {
message("Тестовый запрос не удался.")
}
all_data
# ДЕСКРИПТИВНЫЙ АНАЛИЗ
cat("=== ОБЩАЯ ИНФОРМАЦИЯ ===\n")
str(all_data)
cat("\nКоличество стран:", length(unique(all_data$Country)))
cat("\nГоды в данных:", unique(all_data$Year), "\n")
cat("\n=== СВОДНАЯ СТАТИСТИКА ===\n")
numeric_cols <- sapply(all_data, is.numeric)
summary(all_data[, numeric_cols])
last_year <- max(all_data$Year)
cat("\n=== ТОП-5 СТРАН ЗА", last_year, "ГОД ===\n")
head(all_data[all_data$Year == last_year, c("Country", "QualityofLifeIndex")] %>%
arrange(desc(QualityofLifeIndex)), 5)
par(mfrow = c(1, 2))
boxplot(QualityofLifeIndex ~ Year, data = all_data,
main = "Качество жизни по годам",
xlab = "Год", ylab = "Индекс качества жизни",
col = "lightblue", las = 2)
boxplot(SafetyIndex ~ Year, data = all_data,
main = "Безопасность по годам",
xlab = "Год", ylab = "Индекс безопасности",
col = "lightgreen", las = 2)
par(mfrow = c(1, 1))
cat("\n=== СРЕДНИЕ ЗНАЧЕНИЯ ПОКАЗАТЕЛЕЙ ПО ГОДАМ ===\n")
aggregate(. ~ Year, data = all_data[, numeric_cols], mean, na.rm = TRUE)
last_year_data <- all_data[all_data$Year == last_year, numeric_cols]
cat("\n=== КОРРЕЛЯЦИЯ ПОКАЗАТЕЛЕЙ ЗА", last_year, "ГОД ===\n")
round(cor(last_year_data, use = "complete.obs"), 2)
# ВАРИАНТ 7
# 1. Фильтрация данных по выбранным странам
selected_countries <- c("Turkey", "Greece", "Egypt", "Australia", "New Zealand")
filtered_data <- all_data[all_data$Country %in% selected_countries, ]
# 2. Проверка наличия всех стран
if (nrow(filtered_data) == 0) {
stop("Не найдены данные для указанных стран. Проверьте названия.")
} else {
cat("Найдены данные для стран:", toString(unique(filtered_data$Country)), "\n")
}
# 3. Создаем список всех показателей (кроме Year и Country)
metrics <- setdiff(names(filtered_data), c("Year", "Country", "Rank"))
# 4. Визуализация - линейные графики для каждого показателя
par(mfrow = c(3, 3), mar = c(4, 4, 2, 1)) # Настройки области графиков
for (metric in metrics) {
# Создаем пустой график
plot(1, type = "n",
xlim = range(filtered_data$Year),
ylim = range(filtered_data[[metric]], na.rm = TRUE),
main = metric,
xlab = "Year", ylab = "Index Value")
# Добавляем линии для каждой страны
colors <- c("red", "blue", "green", "orange", "purple")
for (i in seq_along(selected_countries)) {
country_data <- filtered_data[filtered_data$Country == selected_countries[i], ]
lines(country_data$Year, country_data[[metric]],
col = colors[i], lwd = 2, type = "b")
}
# Добавляем легенду на первый график
if (metric == metrics[1]) {
legend("bottomright", legend = selected_countries,
col = colors, lwd = 2, cex = 1.2)
}
}
# 5. Альтернативная визуализация - тепловая карта изменений
# Создаем матрицу средних изменений
mean_changes <- sapply(selected_countries, function(country) {
country_data <- filtered_data[filtered_data$Country == country, ]
sapply(metrics, function(m) {
diff(range(country_data[[m]], na.rm = TRUE))
})
})
# Визуализация тепловой карты
par(mfrow = c(1, 1))
image(t(mean_changes), col = heat.colors(12),
axes = FALSE, main = "Общие изменения показателей")
axis(1, at = seq(0, 1, length.out = ncol(mean_changes)),
labels = colnames(mean_changes), las = 2)
axis(2, at = seq(0, 1, length.out = nrow(mean_changes)),
labels = rownames(mean_changes), las = 1)
